# -*- coding: utf-8 -*-
"""Stock Price Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19LXSUateNfyDdqnXESJT6oeCvpyLBVXr

# Install Required Packages
"""

# Install the required Alpha Vantage library
!pip install alpha_vantage pandas matplotlib seaborn scikit-learn

!pip install ta #Technical Analysis library for advanced indicators

# Uncomment the following line if not already installed
# !pip install alpha_vantage pandas scikit-learn matplotlib seaborn (Why plotlib?)

"""# Import Required Libraries"""

# Import libraries for API usage, data handling, visualization, and modeling
import pandas as pd
import numpy as np
from alpha_vantage.timeseries import TimeSeries  # Alpha Vantage API for stock data
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

# Advanced Libraries
from sklearn.ensemble import RandomForestRegressor # For advanced modeling
from ta.momentum import RSIIndicator # For advanced technical analysis / Relative Strength Index
from ta.volatility import BollingerBands # For advanced technical analysis / Bollinger Bands
from sklearn.pipeline import Pipeline # For automating preprocessing and modeling
from sklearn.preprocessing import StandardScaler # For scaling data

"""# Combine Data for Multiple Stocks"""

# Initialize the Alpha Vantage TimeSeries API
API_KEY = 'CDKEM9HIITD7JSYJ'  # Replace with your Alpha Vantage API key
ts = TimeSeries(key=API_KEY, output_format='pandas')

# Define the stock tickers you want to analyze
stocks = ['AAPL', 'TSLA', 'BRK.B', 'AMZN', 'VOO']  # Apple, Tesla, Berkshire Hathaway, Amazon, Vanguard ETF

# Combine Data for Multiple Stocks; Fetch and preprocess data
stock_data = {}  # Dictionary to store raw stock data for each ticker
combined_data = []  # List to store processed data for all stocks

for stock in stocks:
    # Fetch stock data from Alpha Vantage API
    try:
        data, meta_data = ts.get_daily(symbol=stock, outputsize='full')  # Fetch daily stock data
        stock_data[stock] = data  # Store raw data in dictionary

        # Preprocessing and feature engineering
        data = data.copy()
        data.columns = ['Open', 'High', 'Low', 'Close', 'Volume']  # Rename columns for consistency
        data['Stock_Ticker'] = stock  # Add a column for stock ticker
        data['Daily_Return'] = data['Close'].pct_change()  # Calculate daily return
        data['SMA_10'] = data['Close'].rolling(window=10).mean()  # Calculate 10-day simple moving average
        data['SMA_50'] = data['Close'].rolling(window=50).mean()  # Calculate 50-day simple moving average

        # Add RSI (Relative Strength Index)
        data['RSI'] = RSIIndicator(close=data['Close'], window=14).rsi()

        # Add Bollinger Bands
        bb = BollingerBands(close=data['Close'], window=20)
        data['BB_High'] = bb.bollinger_hband()  # Upper Bollinger Band
        data['BB_Low'] = bb.bollinger_lband()  # Lower Bollinger Band

        # Drop rows with missing values due to rolling calculations
        data.dropna(inplace=True)

        # Append processed data to combined_data list
        combined_data.append(data)

    except Exception as e:
        print(f"Error fetching data for {stock}: {e}")

# Combine all stocks data into one dataframe
df_combined = pd.concat(combined_data)

# Drop rows with missing values
df_combined.dropna(inplace=True)

print(df_combined.head())

"""# Define Features & Target"""

features = ['Open', 'High', 'Low', 'Volume', 'Daily_Return', 'SMA_10', 'SMA_50', 'RSI', 'BB_High', 'BB_Low']
target = 'Close'

X = df_combined[features]
y = df_combined[target]

"""#  Split Data into Training and Testing Sets"""

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

"""# Advanced Model - Random Forest Regressor"""

# Initialize the Random Forest Model
rf_model = RandomForestRegressor(n_estimators=100, random_state=42)

"""# Create a Pipeline for Automation"""

pipeline = Pipeline([
    ('scaler', StandardScaler()), # Scale features for better performance
    ('model', rf_model) # Use Random Forest as the model
])

"""# Train the Pipeline"""

pipeline.fit(X_train, y_train)

"""# Evaluate the Model"""

y_pred_rf = pipeline.predict(X_test)

"""# Calculate performance metrics"""

mse_rf = mean_squared_error(y_test, y_pred_rf)
r2_rf = r2_score(y_test, y_pred_rf)

print(f"\nRandom Forest Model - Mean Squared Error (MSE): {mse_rf:.4f}")
print(f"Random Forest Model - R-squared (R2): {r2_rf:.4f}")

"""# Visualization"""

plt.figure(figsize=(15, 5))
plt.plot(y_test.reset_index(drop=True), label ='Actual Prices', color='blue')
plt.plot(y_pred_rf, label='Predicted Prices (RF)', color='green', linestyle='dashed')
plt.legend()
plt.title('Actual vs. Predicted Stock Prices (Test Set - Random Forest)')
plt.xlabel('Time')
plt.ylabel('Closing Price')
plt.show()